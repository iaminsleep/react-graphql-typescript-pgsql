import { share as e, mergeMap as r, filter as a, onPush as t, takeUntil as o, merge as n } from "wonka";

import { extractFiles as i } from "extract-files";

import { makeFetchBody as s, makeFetchURL as c, makeFetchOptions as p, makeFetchSource as d } from "@urql/core/internal";

var multipartFetchExchange = ({forward: u, dispatchDebug: f}) => v => {
  var h = e(v);
  var l = r((e => {
    var r = a((r => "teardown" === r.kind && r.key === e.key))(h);
    var {files: n, clone: u} = i({
      ...e.variables
    });
    var v = s({
      query: e.query,
      variables: u
    });
    var l;
    var m;
    if (n.size) {
      l = c(e);
      if ("application/json" === (m = p(e)).headers["content-type"]) {
        delete m.headers["content-type"];
      }
      m.method = "POST";
      m.body = new FormData;
      m.body.append("operations", JSON.stringify(v));
      var y = {};
      var b = 0;
      n.forEach((e => {
        y[++b] = e.map((e => `variables.${e}`));
      }));
      m.body.append("map", JSON.stringify(y));
      b = 0;
      n.forEach(((e, r) => {
        m.body.append("" + ++b, r, r.name);
      }));
    } else {
      l = c(e, v);
      m = p(e, v);
    }
    "production" !== process.env.NODE_ENV && f({
      type: "fetchRequest",
      message: "A fetch request is being executed.",
      operation: e,
      data: {
        url: l,
        fetchOptions: m
      },
      source: "multipartFetchExchange"
    });
    return t((r => {
      var a = !r.data ? r.error : void 0;
      "production" !== process.env.NODE_ENV && f({
        type: a ? "fetchError" : "fetchSuccess",
        message: `A ${a ? "failed" : "successful"} fetch response has been returned.`,
        operation: e,
        data: {
          url: l,
          fetchOptions: m,
          value: a || r
        },
        source: "multipartFetchExchange"
      });
    }))(o(r)(d(e, l, m)));
  }))(a((e => "query" === e.kind || "mutation" === e.kind))(h));
  var m = u(a((e => "query" !== e.kind && "mutation" !== e.kind))(h));
  return n([ l, m ]);
};

export { multipartFetchExchange };
//# sourceMappingURL=urql-exchange-multipart-fetch.mjs.map
