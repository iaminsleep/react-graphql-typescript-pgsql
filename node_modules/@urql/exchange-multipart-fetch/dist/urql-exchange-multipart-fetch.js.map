{"version":3,"file":"urql-exchange-multipart-fetch.js","sources":["../src/multipartFetchExchange.ts"],"sourcesContent":["import { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\nimport { extractFiles } from 'extract-files';\nimport { Exchange } from '@urql/core';\n\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '@urql/core/internal';\n\nexport const multipartFetchExchange: Exchange = ({\n  forward,\n  dispatchDebug,\n}) => ops$ => {\n  const sharedOps$ = share(ops$);\n  const fetchResults$ = pipe(\n    sharedOps$,\n    filter(operation => {\n      return operation.kind === 'query' || operation.kind === 'mutation';\n    }),\n    mergeMap(operation => {\n      const teardown$ = pipe(\n        sharedOps$,\n        filter(op => op.kind === 'teardown' && op.key === operation.key)\n      );\n\n      // Spreading operation.variables here in case someone made a variables with Object.create(null).\n      const { files, clone: variables } = extractFiles({\n        ...operation.variables,\n      });\n      const body = makeFetchBody({ query: operation.query, variables });\n\n      let url: string;\n      let fetchOptions: RequestInit;\n      if (files.size) {\n        url = makeFetchURL(operation);\n        fetchOptions = makeFetchOptions(operation);\n        if (fetchOptions.headers!['content-type'] === 'application/json') {\n          delete fetchOptions.headers!['content-type'];\n        }\n\n        fetchOptions.method = 'POST';\n        fetchOptions.body = new FormData();\n        fetchOptions.body.append('operations', JSON.stringify(body));\n\n        const map = {};\n        let i = 0;\n        files.forEach(paths => {\n          map[++i] = paths.map(path => `variables.${path}`);\n        });\n\n        fetchOptions.body.append('map', JSON.stringify(map));\n\n        i = 0;\n        files.forEach((_, file) => {\n          (fetchOptions.body as FormData).append(`${++i}`, file, file.name);\n        });\n      } else {\n        url = makeFetchURL(operation, body);\n        fetchOptions = makeFetchOptions(operation, body);\n      }\n\n      dispatchDebug({\n        type: 'fetchRequest',\n        message: 'A fetch request is being executed.',\n        operation,\n        data: {\n          url,\n          fetchOptions,\n        },\n      });\n\n      return pipe(\n        makeFetchSource(operation, url, fetchOptions),\n        takeUntil(teardown$),\n        onPush(result => {\n          const error = !result.data ? result.error : undefined;\n\n          dispatchDebug({\n            type: error ? 'fetchError' : 'fetchSuccess',\n            message: `A ${\n              error ? 'failed' : 'successful'\n            } fetch response has been returned.`,\n            operation,\n            data: {\n              url,\n              fetchOptions,\n              value: error || result,\n            },\n          });\n        })\n      );\n    })\n  );\n\n  const forward$ = pipe(\n    sharedOps$,\n    filter(operation => {\n      return operation.kind !== 'query' && operation.kind !== 'mutation';\n    }),\n    forward\n  );\n\n  return merge([fetchResults$, forward$]);\n};\n"],"names":["multipartFetchExchange","forward","dispatchDebug","ops$","sharedOps$","share","mergeMap","operation","body","makeFetchBody","query","variables","url","fetchOptions","makeFetchURL","makeFetchOptions","headers","method","FormData","append","JSON","stringify","files","forEach","paths","map","i","path","file","name","type","message","data","error","result","undefined"],"mappings":";;;;;;AAWA,IAAAA,sBAAA,GAAA,CAAA;EAAAC,OAAA;AAAAC,EAAAA,aAAAA;AAAA,CAAA,KAAAC,IAAA,IAAA;AAIE,EAAA,IAAAC,UAAA,GAAAC,WAAA,CAAAF,IAAA,CAAA,CAAA;sBAKEG,cAAA,CAAAC,SAAA,IAAA;uGAAA;;;;;;;IAWE,IAAAC,IAAA,GAAAC,sBAAA,CAAA;MAAAC,KAAA,EAAAH,SAAA,CAAAG,KAAA;AAAAC,MAAAA,SAAAA;AAAA,KAAA,CAAA,CAAA;AAEA,IAAA,IAAAC,GAAA,CAAA;AACA,IAAA,IAAAC,YAAA,CAAA;;;AAEED,MAAAA,GAAA,GAAAE,qBAAA,CAAAP,SAAA,CAAA,CAAA;AACAM,MAAAA,YAAA,GAAAE,yBAAA,CAAAR,SAAA,CAAA,CAAA;;;AAEE,QAAA,OAAAM,YAAA,CAAAG,OAAA,CAAA,cAAA,CAAA,CAAA;AACD,OAAA;;MAEDH,YAAA,CAAAI,MAAA,GAAA,MAAA,CAAA;AACAJ,MAAAA,YAAA,CAAAL,IAAA,GAAA,IAAAU,QAAA,EAAA,CAAA;AACAL,MAAAA,YAAA,CAAAL,IAAA,CAAAW,MAAA,CAAA,YAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAb,IAAA,CAAA,CAAA,CAAA;;;AAIAc,MAAAA,KAAA,CAAAC,OAAA,CAAAC,KAAA,IAAA;AACEC,QAAAA,GAAA,CAAA,EAAAC,CAAA,CAAA,GAAAF,KAAA,CAAAC,GAAA,CAAAE,IAAA,IAAA,CAAAA,UAAAA,EAAAA,IAAA,EAAA,CAAA,CAAA;OADF,CAAA,CAAA;AAIAd,MAAAA,YAAA,CAAAL,IAAA,CAAAW,MAAA,CAAA,KAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAI,GAAA,CAAA,CAAA,CAAA;;;AAIGZ,QAAAA,YAAA,CAAAL,IAAA,CAAAW,MAAA,CAAA,CAAA,EAAA,EAAAO,CAAA,CAAA,CAAA,EAAAE,IAAA,EAAAA,IAAA,CAAAC,IAAA,CAAA,CAAA;;AAEJ,WAAM;AACLjB,MAAAA,GAAA,GAAAE,qBAAA,CAAAP,SAAA,EAAAC,IAAA,CAAA,CAAA;AACAK,MAAAA,YAAA,GAAAE,yBAAA,CAAAR,SAAA,EAAAC,IAAA,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAAN,aAAA,CAAA;AACE4B,MAAAA,IAAA,EAAA,cADF;AAEEC,MAAAA,OAAA,EAAA,oCAFF;eAAA;AAIEC,MAAAA,IAAA,EAAA;WAAA;;OAJF;AAAA,MAAA,QAAA,EAAA,wBAAA;AAAA,KAAA,CAAA,GAAA,SAAA,CAAA;;MAcI,IAAAC,KAAA,GAAA,CAAAC,MAAA,CAAAF,IAAA,GAAAE,MAAA,CAAAD,KAAA,GAAAE,SAAA,CAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAAjC,aAAA,CAAA;mDAAA;sDAAA,kCAAA,CAAA;iBAAA;AAME8B,QAAAA,IAAA,EAAA;aAAA;sBAAA;;SANF;AAAA,QAAA,QAAA,EAAA,wBAAA;AAAA,OAAA,CAAA,GAAA,SAAA,CAAA;;GA3DN;;;iBAgFA/B;;;;AAKJ;;;;"}